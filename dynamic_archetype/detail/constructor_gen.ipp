/*
  This file is copyright (c) Patrick Moran 2011.  A license is granted to any
  party to use this file according to the terms of the Boost Software License
  version 1 as it appears below:


  Boost Software License - Version 1.0 - August 17th, 2003

  Permission is hereby granted, free of charge, to any person or organization
  obtaining a copy of the software and accompanying documentation covered by
  this license (the "Software") to use, reproduce, display, distribute,
  execute, and transmit the Software, and to prepare derivative works of the
  Software, and to permit third-parties to whom the Software is furnished to
  do so, all subject to the following:

  The copyright notices in the Software and this entire statement, including
  the above license grant, this restriction and the following disclaimer,
  must be included in all copies of the Software, in whole or in part, and
  all derivative works of the Software, unless such copies or derivative
  works are solely in the form of machine-executable object code generated by
  a source language processor.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/


#define EN_IF(cond, tested, res_type)					\
  typename boost::enable_if<EN_IF_COND(cond, tested), res_type>::type

#define EN_IF_COND(cond, tested)					\
  typename base_t::template cond ## _cond<BOOST_PP_SEQ_ENUM(tested)>


// Generate an overload stub
#define OVERLOAD_BEGIN(a, b, c)						\
  TPARAMS								\
  class dynamic_archetype<Concepts...>::impl::				\
    constructor_gen<Policy, Parent, a, b, c> : public Parent		\
  {									\
private:								\
 struct Invisible{};							\
 typedef class constructor_gen<Policy, Parent, true, true, true> base_t; \
									\
public:									\
									\
 template<class TOther> explicit					\
 constructor_gen(TOther o,  EN_IF(explicit_constructor,			\
				  (TOther), Invisible const &)		\
		 = Invisible())						\
   : Parent(make_single_tuple(o))					\
 {									\
 }									\
									\
									\
 template<class... Args,						\
	  EN_IF(constructor, (Args...), int) = 0>			\
 constructor_gen(Args... args)						\
   : Parent(args...)							\
 {}

#define OVERLOAD_END() }


/*
  Implementation Note:
  If we wish to stay C++03 compatible, we can't inherit constructors.  So
  even though we build up our dynamic archetypes recursively through
  inheritance, all the constructors must be pushed to the bottom of the
  inheritance DAG.

  To acheive this, the type returned to the user is always an instanitiation
  of constructor_gen. It's Policy parameter contains instructions on which
  constructors should be implemented.  It will then inherit from the Parent
  parameter, which is where the recursion to the other archetypes will take
  place.  Finally, three specific arguments of the recursion (is there a
  default constructor, is there a copy constructor and if there is a copy
  constructor is it explicit?) are split out since they must be specialized
  on.

  It probably seems inconsistent to go through what is essentially a lot of
  boilerplate when at least some of it could be eliminated via C++11.  We
  could go from 6 specializations to 3 by using default template parameters
  on a function (on the default constructor).  Yet we still require variadic
  templates.  The reason is that the variadic template requirement will be
  removed and emulation provided additionally.
*/
namespace dynamic_archetypes {

  TPARAMS
  class dynamic_archetype<Concepts...>::impl::
    constructor_gen<Policy, Parent, true, true, true>
    : public Parent
  {
    template<class TOther> struct explicit_constructor_cond;
    template<class... TOthers> struct constructor_cond; // REQUIRES VARIADICS
#define FRIEND(a, b, c) friend class constructor_gen<Policy, Parent, a, b, c>
    FRIEND(true,  true,  false);
    FRIEND(true,  false, false);
    FRIEND(false, true,  true );
    FRIEND(false, true,  false);
    FRIEND(false, false, false);
#undef FRIEND
    struct Invisible {};
  public:
    constructor_gen()                                       : Parent()      {}
    explicit constructor_gen(constructor_gen const & other) : Parent(other) {}
    template<class TOther> explicit
    constructor_gen(TOther t,
		    typename boost::enable_if<
		      explicit_constructor_cond<TOther>,
		      Invisible const &>::type = Invisible())
    : Parent(make_single_tuple(t))
    {}
  template<class... Args,
	   typename
	   boost::enable_if_c<
	     constructor_cond<Args...>::value, int>::type = 0>
  constructor_gen(Args... args)
    : Parent( boost::make_tuple(args...) )
  {}

};

OVERLOAD_BEGIN(true, true, false)
  constructor_gen()                         : Parent()                     {}
  constructor_gen(constructor_gen const &t) : Parent(make_single_tuple(t)) {}
OVERLOAD_END();

OVERLOAD_BEGIN(true, false, false)
  constructor_gen()                         : Parent()                     {}
private:
  constructor_gen(constructor_gen const &t) : Parent(make_single_tuple(t)) {}
OVERLOAD_END();

OVERLOAD_BEGIN(false, true, true)
  explicit constructor_gen(constructor_gen const & t)
    : Parent(make_single_tuple(t))
  {}
private:
  constructor_gen() : Parent() {}
OVERLOAD_END();

OVERLOAD_BEGIN(false, true, false)
  constructor_gen(constructor_gen const & t) : Parent(make_single_tuple(t)) {}
private:
  constructor_gen() : Parent() {}
OVERLOAD_END();

OVERLOAD_BEGIN(false, false, false)
private:
  constructor_gen() : Parent() {}
  constructor_gen(constructor_gen const &t ) : Parent(make_single_tuple(t)) {}
OVERLOAD_END();

  TPARAMS
  template<class TOther>
  struct dynamic_archetype<Concepts...>::impl::
    constructor_gen<Policy, Parent, true, true, true>::
  explicit_constructor_cond {
    static bool const value = 
      Policy::template explicitly_construct_from<TOther>::type::value;
  };

  TPARAMS
  template<class... TOthers>  
  struct dynamic_archetype<Concepts...>::impl::
    constructor_gen<Policy, Parent, true, true, true>::constructor_cond {
    static const bool value =
      Policy::template construct_from<TOthers...>::type::value;
  };


}

#undef OVERLOAD_BEGIN
#undef OVERLOAD_END
#undef EN_IF
#undef EN_IF_COND
