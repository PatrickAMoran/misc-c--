/*
   This file is copyright (c) Patrick Moran 2011.  A license is granted to any
   party to use this file according to the terms of the Boost Software License
   version 1 as it appears below:


   Boost Software License - Version 1.0 - August 17th, 2003

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:

   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer,
   must be included in all copies of the Software, in whole or in part, and
   all derivative works of the Software, unless such copies or derivative
   works are solely in the form of machine-executable object code generated by
   a source language processor.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>

#include <algorithm>

// Pull in the iterator implementation

#include "gap_buffer_iterators.ipp"
#include <iostream>

template<class TContainer>
void
gap_buffer<TContainer>::
resolve_offset()
{
  if(offset == 0)
    return;
  else if(offset < 0){
    typename TContainer::iterator start_iter = before.end();
    std::advance(start_iter, offset);
    after.insert(after.begin(), start_iter, before.end());
    before.erase(start_iter, before.end());
  }else{
    typename TContainer::iterator end_iter = after.begin();
    std::advance(end_iter, offset);
    before.insert(before.end(), after.begin(), end_iter);
    after.erase(after.begin(), end_iter);
  }
  offset = 0;
}


template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::
resolve_offset(typename gap_buffer<TContainer>::iterator iter)
{
  if(offset == 0)
    return iter;

  typename TContainer::iterator pos_iter = iter.location;
  bool pos_before = iter.is_before;

  if(offset < 0){
    typename TContainer::iterator start_iter = before.end();
    difference_type const iter_dist =
      (pos_before ? std::distance(pos_iter, start_iter) : 0);

    std::advance(start_iter, offset);
    after.insert(after.begin(), start_iter, before.end());
    before.erase(start_iter, before.end());

    if(pos_before && iter_dist <= offset){
      pos_iter = after.begin();
      pos_before = false;
      std::advance(pos_iter, offset - iter_dist);
    }

    offset = 0;
  }else{
    typename TContainer::iterator end_iter = after.begin();
    difference_type const iter_dist =
      (pos_before ? 0 : std::distance(end_iter, pos_iter));

    std::advance(end_iter, offset);
    before.insert(before.end(), after.begin(), end_iter);
    after.erase(after.begin(), end_iter);
    if(!pos_before && iter_dist < offset){
      pos_iter = before.end();
      pos_before = true;
      std::advance(pos_iter, -(-offset - iter_dist));
    }

    offset = 0;
  }

  return iterator(pos_iter, pos_before, before.end(), after.begin());
}


template<class TContainer>
template<class TSinglePassCharRange>
typename gap_buffer<TContainer>::size_type
gap_buffer<TContainer>::
insert(TSinglePassCharRange const & rng)
{
  // We just resolve first, since pushing onto the end of before should be about
  // as efficient as we're going to get.
  resolve_offset();
  before.insert(before.end(), boost::begin(rng), boost::end(rng));
  return position();
}

template<class TContainer>
typename gap_buffer<TContainer>::size_type
gap_buffer<TContainer>::
insert(value_type const c)
{
  // We just resolve first, since pushing onto the end of before should be about
  // as efficient as we're going to get.
  resolve_offset();
  before.insert(before.end(), c);
  return position();
}



template<class TContainer>
typename gap_buffer<TContainer>::size_type
gap_buffer<TContainer>::
position() const
{
  return before.size() + offset;
}

template<class TContainer>
typename gap_buffer<TContainer>::size_type
gap_buffer<TContainer>::
size() const
{
  return before.size() + after.size();
}

template<class TContainer>
typename gap_buffer<TContainer>::size_type
gap_buffer<TContainer>::
max_size() const
{
  return std::min(before.max_size(), after.max_size());
}

template<class TContainer>
bool
gap_buffer<TContainer>::
empty() const
{
  return before.empty() && after.empty();
}

template<class TContainer>
void
gap_buffer<TContainer>::
swap(gap_buffer<TContainer> & other)
{
  other.before.swap(before);
  other.after.swap(after);
  std::swap(offset, other.offset);
}


template<class TContainer>
void
gap_buffer<TContainer>::
advance(typename gap_buffer<TContainer>::difference_type const d)
{
  offset += d;
}


template<class TContainer>
void
gap_buffer<TContainer>::
erase(typename gap_buffer<TContainer>::difference_type const d)
{
  if(d == 0)
    return;

  if( (offset <= 0) && (d < 0) ){ // C
    after.insert(after.begin(), before.end() + offset, before.end());
    before.erase(before.end() + (d + offset),
                 before.end());
  }else if( (offset >= 0) && (d > 0) ){ // F
    before.insert(before.end(), after.begin(), after.begin() + offset);
    after.erase(after.begin(), after.begin() + offset + d);
  }else if( (offset < 0) && (d > 0) && (-offset <= d) ){ // B
    before.erase(before.end() + offset, before.end());
    after.erase(after.begin(), after.begin() + (offset + d));
  }else if( (offset > 0) && (d < 0) && (offset <= -d) ){ // E
    before.erase(before.end() + offset + d, before.end());
    after.erase(after.begin(), after.begin() + offset);
  }else if( (offset <= 0) && (d > 0) && (-offset > d) ){ // A
    after.insert(after.begin(), before.end() + offset + d, before.end());
    before.erase(before.end() + offset, before.end());
  }else if( (offset > 0) && (d < 0) && (offset > -d) ){ // D
    before.insert(before.end(), after.begin(), after.begin() + offset + d);
    after.erase(after.begin(), after.begin() + offset);
  }
  offset = 0;
}

template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::
here()
{
  iterator rtn(after.begin(), false, before.end(), after.begin());
  std::advance(rtn, offset);
  return rtn;
}

template<class TContainer>
typename gap_buffer<TContainer>::const_iterator
gap_buffer<TContainer>::
here() const
{
  const_iterator rtn(after.begin(), false, before.end(), after.begin());
  std::advance(rtn, offset);
  return rtn;
}


template<class TContainer>
typename gap_buffer<TContainer>::reverse_iterator
gap_buffer<TContainer>::
rhere()
{
  reverse_iterator rtn = after.empty() ?
    reverse_iterator(before.rbegin(), false,
                     after.rend(), before.rbegin()) :
    reverse_iterator(after.rend()-1, true,
                     after.rend(), before.rbegin());
  std::advance(rtn, -offset);
  return rtn;
}

template<class TContainer>
typename gap_buffer<TContainer>::const_reverse_iterator
gap_buffer<TContainer>::
rhere() const
{
  return const_cast<gap_buffer<TContainer>&>(*this).rhere();
}


template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::
begin()
{
  if(before.empty())
    return iterator(after.begin(), false, before.end(), after.begin());
  else
    return iterator(before.begin(), true, before.end(), after.begin());
}

template<class TContainer>
typename gap_buffer<TContainer>::const_iterator
gap_buffer<TContainer>::
begin() const
{
  return const_cast<gap_buffer<TContainer>& >(*this).begin();
}

template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::
end()
{
  return iterator(after.end(), false, before.end(), after.begin());
}

template<class TContainer>
typename gap_buffer<TContainer>::const_iterator
gap_buffer<TContainer>::
end() const
{
  return const_cast<gap_buffer<TContainer>& >(*this).end();
}




template<class TContainer>
typename gap_buffer<TContainer>::reverse_iterator
gap_buffer<TContainer>::
rbegin()
{
  if(after.empty())
    return reverse_iterator(before.rbegin(), false, 
			    after.rend(), before.rbegin());
  else
    return reverse_iterator(after.rbegin(), true,
			    after.rend(), before.rbegin());
}

template<class TContainer>
typename gap_buffer<TContainer>::const_reverse_iterator
gap_buffer<TContainer>::
rbegin() const
{
  return const_cast<gap_buffer<TContainer>&>(*this).rbegin();
}

template<class TContainer>
typename gap_buffer<TContainer>::reverse_iterator
gap_buffer<TContainer>::
rend()
{
  return reverse_iterator(before.rend(), false, after.rend(), before.rbegin());
}

template<class TContainer>
typename gap_buffer<TContainer>::const_reverse_iterator
gap_buffer<TContainer>::
rend() const
{
  return const_reverse_iterator(before.rend(), false, after.rend(), 
				before.rbegin());
}


template<class TContainer>
gap_buffer<TContainer>::gap_buffer()
  : offset(0)
{}

template<class TContainer>
gap_buffer<TContainer>::gap_buffer(gap_buffer const & other)
  : before(other.before)
  , after(other.after)
  , offset(other.offset)
{}

template<class TContainer>
gap_buffer<TContainer> &
gap_buffer<TContainer>::operator=(gap_buffer const & other)
{
  before = other.before;
  after = other.after;
  offset = other.offset;
  return *this;
}


template<class TContainer>
gap_buffer<TContainer>::gap_buffer(size_type n, value_type e)
  : before(n, e)
  , offset(0)
{}

template<class TContainer>
template<class InputIterator>
gap_buffer<TContainer>::gap_buffer(InputIterator const & i,
                                   InputIterator const & j)
  : before(i, j)
  , offset(0)
{}

template<class TContainer>
typename gap_buffer<TContainer>::reference
gap_buffer<TContainer>::front()
{
  return !before.empty() ? before.front() : after.front();
}

template<class TContainer>
typename gap_buffer<TContainer>::const_reference
gap_buffer<TContainer>::front() const
{
  return !before.empty() ? before.front() : after.front();
}

template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::insert(iterator position, const_reference element)
{
  position = resolve_offset(position);
  typename TContainer::iterator iter;
  bool is_before;
  if(position.location == after.begin()){
    before.insert(before.end(), element);
    iter = after.begin();
    is_before = false;
  }else if(position.is_before){
    iter = before.insert(position.location, element);
    is_before = true;
  }else{
    iter = after.insert(position.location, element);
    is_before = false;
  }
  return iterator(iter, is_before, before.end(), after.begin());
}

template<class TContainer>
void 
gap_buffer<TContainer>::insert(iterator position, size_type n,
                               const_reference element)
{
  position = resolve_offset(position);
  if(position.location == after.begin())
    before.insert(before.end(), n, element);
  else if(position.is_before)
    before.insert(position.location, n, element);
  else
    after.insert(position.location, n, element);
}

template<class TContainer>
template<class InputIterator>
void
gap_buffer<TContainer>::insert(iterator position,
                               InputIterator const & i, InputIterator const & j)
{
  position = resolve_offset(position);
  if(position.location == after.begin())
    before.insert(before.end(), i, j);
  else if(position.is_before)
    before.insert(position.location, i, j);
  else
    after.insert(position.location, i, j);
}

template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::erase(iterator position)
{
  position = resolve_offset(position);
  bool is_before = position.is_before;
  TContainer & to_erase_from = (is_before ? before : after);
  typename TContainer::iterator iter = to_erase_from.erase(position.location);

  if(iter == before.end()){
    is_before = false;
    iter = after.begin();
  }
  return iterator(iter, is_before, before.end(), after.begin());
}

template<class TContainer>
typename gap_buffer<TContainer>::iterator
gap_buffer<TContainer>::erase(iterator start, iterator end)
{
  difference_type const diff = std::distance(start, end);
  start = resolve_offset(start);
  end = start;
  std::advance(end, diff);

  typename TContainer::iterator
    before_begin = (start.is_before ? start.location : before.end()   ),
    before_end   = (end.is_before   ? end.location   : before.end()   ),
    after_begin  = (start.is_before ? after.begin()  : start.location ),
    after_end    = (end.is_before   ? after.begin()  : end.location   );

  bool const use_after =
    (after_end != after.begin()) || 
    ((before_end == before.end()) && (before_begin != before.end()));
  
  typename TContainer::iterator
    before_rtn = before.erase( before_begin, before_end ),
    after_rtn  = after. erase( after_begin,  after_end  );

  return iterator((use_after ? after_rtn : before_rtn), use_after, 
		  before.end(), after.begin());
}

template<class TContainer>
void
gap_buffer<TContainer>::clear()
{
  before.clear();
  after.clear();
  offset = 0;
}


template<class TContainer>
void
gap_buffer<TContainer>::resize(size_type n, value_type const & e)
{
  resolve_offset();
  if(n <= before.size() || after.empty()){
    after.clear();
    before.resize(n, e);
  }
  else
    after.resize(n - before.size());
}

#define BINARY_BUFFER_BOOL_OPER(oper)				\
  template<class TContainer>					\
  bool operator oper ( gap_buffer<TContainer> const & lhs,	\
		       gap_buffer<TContainer> const & rhs)

BINARY_BUFFER_BOOL_OPER( == )
{
  return (lhs.size() == rhs.size()) && 
    (std::mismatch(lhs.begin(), lhs.end(), rhs.begin()).first == lhs.end());
}

BINARY_BUFFER_BOOL_OPER( < )
{
  return std::lexicographical_compare(lhs.begin(), lhs.end(), 
				      rhs.begin(), rhs.end());
}

BINARY_BUFFER_BOOL_OPER( <= )
{
  typename gap_buffer<TContainer>::const_iterator const left_end =
    ((lhs.size() > rhs.size()) ?
     lhs.begin() + rhs.size()  :
     lhs.end());

  std::pair<typename gap_buffer<TContainer>::const_iterator,
	    typename gap_buffer<TContainer>::const_iterator> rtn =
    std::mismatch(lhs.begin(), left_end, rhs.begin());

  if(rtn.first == left_end)
    return (lhs.size() <= rhs.size());
  else
    return (*rtn.first < *rtn.second);
}

BINARY_BUFFER_BOOL_OPER( != ) { return !(lhs == rhs); }
BINARY_BUFFER_BOOL_OPER( > )  { return  (rhs <  lhs); }
BINARY_BUFFER_BOOL_OPER( >= ) { return  (rhs <= lhs); }


#undef BINARY_BUFFER_BOOL_OPER
